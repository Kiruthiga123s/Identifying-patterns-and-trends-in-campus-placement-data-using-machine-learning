# -*- coding: utf-8 -*-
"""Copy of batch4project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1F8JYYXJnQd2NboZt9PJ3B5IlzcPkSDWM
"""

import numpy as np
import pandas as pd
import os
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn import svm
from sklearn.metrics import accuracy_score
from sklearn.neighbors import KNeighborsClassifier
from sklearn import metrics 
from sklearn.model_selection import cross_val_score
from sklearn import preprocessing
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
import joblib
from sklearn.metrics import accuracy_score

df = pd.read_csv("/content/collegePlace (1).csv")
  df.head()

df.shape

sns.pairplot(df)

corr = df.corr()

ax = sns.heatmap(corr, vmin = -1, vmax = 1, annot = True)
bottom, top = ax.get_ylim()
ax.set_ylim(bottom + 0.5, top - 0.5)
plt.show()
corr

df.info()

df.isnull().sum()

def transformationplot(feature):
  plt.figure(figsize=(12,5))
  plt.subplot(1,2,1)
  sns.distplot(feature)
  transformationplot(np.log(df['Age']))

df = df.replace(['Male'],[0])
df = df.replace(['Female'],[1])
df = df.replace(['Computer science','Information technology','Electronics and Communication','Mechanical','Electrical','Civil'],[0,1,2,3,4,5])
df

plt.figure(figsize=(12,5))
plt.subplot(121)
sns.distplot(df['CGPA'],color='r')

plt.figure(figsize=(12,5))
plt.subplot(121)
sns.distplot(df['PlacedOrNot'],color='g')

df.describe()

df['Gender'].value_counts()

plt.figure(figsize = (10,6), dpi = 100)
color_palette = sns.color_palette("BuGn_r")
sns.countplot(x = "PlacedOrNot", data = df)
plt.show()

df['Stream'].value_counts()

X = df.drop(columns = 'PlacedOrNot', axis=1)
Y = df['PlacedOrNot']

import joblib
joblib.dump(X,'placement')

print(X)

scaler = StandardScaler()

scaler.fit(X)

plt.figure(figsize=(20,5))
plt.subplot(131)
sns.violinplot(data=df, x='PlacedOrNot', y='PlacedOrNot', hue='CGPA')

#@title Default title text
sns.barplot(x=df.PlacedOrNot, y=df.PlacedOrNot, hue=df.Stream)

from sklearn.model_selection import train_test_split

X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size = 0.2, stratify=Y, random_state=2)

print(X.shape, X_train.shape, X_test.shape)

classifier = svm.SVC(kernel='linear')

classifier.fit(X_train, Y_train)

sc=StandardScaler()
train_test_split=sc.fit_transform('train_test_split')
train_test_split = pd.DataFrame(train_test_split,columns=names)



X = standardized_data
Y = df['PlacedOrNot']
X_train, X_test, Y_train, y_test = train_test_split(X,Y, test_size = 0.2, stratify=Y, random_state=2)

classifier = svm.SVC(kernel='linear')
classifier.fit(X_train, Y_train)
SVC(kernel='linear')
X_train_prediction = classifier.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)
print('Accuracy score of the training data :', training_data_accuracy)

#@title Default title text
best_k = {"Regular":0}
best_score = {"Regular":0}
for k in range(3, 50, 2):
  knn_temp = KNeighborsClassifier(n_neighbors=k)
knn_temp.fit(X_train, Y_train)
knn_temp_pred = knn_temp.predict(X_test)
score = metrics.accuracy_score(Y_test, knn_temp_pred) * 100
if score >= best_score["Regular"] and score < 100:
  best_score["Regular"] = score
  best_k["Regular"] = k
  print("---Results---\nK: {}".format(best_k, best_score))
  knn = KNeighborsClassifier(n_neighbors=best_k["Regular"])
  knn.fit(X_train, Y_train)
  knn_pred = knn.predict(X_test)
  testd = accuracy_score(knn_pred, Y_test)

import tensorflow as tf
from tensorflow import keras
from keras.models import Sequential
from tensorflow.keras import layers

classifier = Sequential()
classifier.add(keras.layers.Dense(6,activation = 'relu', input_dim = 6))
classifier.add(keras.layers.Dropout(0.50))
classifier.add(keras.layers.Dense(6,activation = 'relu'))
classifier.add(keras.layers.Dropout(0.50))
classifier.add(keras.layers.Dense(1,activation = 'sigmoid'))

loss_1 = tf. keras.losses.BinaryCrossentropy()
classifier.compile(optimizer = 'Adam', loss = loss_1 , metrics = ['accuracy'])

classifier.fit(X_train, Y_train, batch_size = 20, epochs = 100)

import pickle
pickle.dump(knn,open("placement.pkl",'wb'))
model = pickle.load(open('placement.pkl', 'rb'))

<section id="hero" class="d-flex flext-column justify-content-center">
<div class="container">
<div class="row justify-content-center">
<div class="col-xl-8">
<h1>Identifying Patterns And Trends In Campus Placement Data using Machine Learning</h1>
</div>
</div>
</div>
</section>

<section id="about" class="about">
<div class=container>
<div class="section-title">
<h2>Fill the details</h2>
</div>
<div class="row content">
<div class="first">
<form action="{{ url_for('y_predict')}}"method="POST">
<input type="number" id="sen1" name="sen1" placeholder="Age">
<input type="number" id="sen2" name="sen2" placeholder="Gender M(0),F(0)">
<input type="number" id="sen3" name="sen3" placeholder="stream CS(0),IT(1),ECE(2),Mech(3),EEE(4)Civil(5)">
<input type="number" id="sen4" name="sen4" placeholder="Internships">
<input type="number" id="sen5" name="sen5" placeholder="CGPA">
<input type="number" id="sen6" name="sen6" placeholder="Number of backlogs">
<input type="submit" value="Submit">
</form>
</div>
</div>
</div>
</section>

<section id="hero" class="d-flex flex-column justify-content-center">
<div class="container">
<div class="row justify-content-center">
<div class="col-xl-8">
<h1>The Prediction is: {{y}}</h1>
<h2> 0 represents Not-Placed</h2>
<h3> 1 represents Placed</h3>
</div>
</div>
</div>
</section>

from flask import Flask, render_template, request
app=Flask(__name__)
import pickle
import joblib
model=pickle.load(open("placement123.pkl",'rb'))
ct=joblib.load('placement')

@app.route('/')
def hello():
  return render_template("index.html")

@app.route('/guest', methods = ["POST"])
def Guest():
  sen1=request.form["sen1"]
  sen2=request.form["sen2"]
  sen3=request.form["sen3"]
  sen4=request.form["sen4"]
  sen5=request.form["sen5"]
  sen6=request.form["sen6"]

  @app.route('/y_predict' , methods = ["POST"])
  def y_predict():
    x_test = [[(yo) for yo in request.form.values()]]
    prediction =model.predict(x_test)
    prediction = prediction[0]
    return render_template("secondpage.html",y=prediction)

app.run(deb)